// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String
  email            String          @unique
  password         String
  role             Role
  isVerified       Boolean         @default(false)
  profileCompleted Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  tests            Test[]          @relation("UserTests")
  answers          Answer[]        @relation("UserAnswers")
  testResponses    TestResponse[]  @relation("UserToTestResponse")
  teacherProfile   TeacherProfile?
  studentProfile   StudentProfile?
}

model VerificationToken {
  email     String   @id
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  email     String   @id
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model TeacherProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  designation     String?
  department      String[]
  degreesTeaching String[]
  studentYears    String[]
  employeeId      String?   @unique
  gender          Gender?
  dateOfBirth     DateTime?
  phoneNumber     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  rollNumber  String? @unique
  department  String?
  yearOfStudy Int?
  courseName  String?

  dateOfBirth      DateTime?
  gender           Gender?
  bloodGroup       String?
  phoneNumber      String?
  permanentAddress String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id          String   @id @default(cuid())
  title       String
  subject     String
  testLink    String
  department  String
  degree      String
  studentYear String
  date        DateTime
  duration    Int // (in mins)
  totalMarks  Int

  questions     Question[]     @relation("TestQuestions")
  testResponses TestResponse[] @relation("TestToTestResponse")

  creator   User   @relation("UserTests", fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id          String       @id @default(cuid())
  type        QuestionType
  question    String
  options     String[]     @default([])
  marks       Int
  test        Test         @relation("TestQuestions", fields: [testId], references: [id])
  testId      String
  answers     Answer[]     @relation("QuestionAnswers")
  userAnswers UserAnswer[] @relation("QuestionUserAnswers")
  testCases   TestCase[]   @relation("QuestionTestCases")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TestCase {
  id         String   @id @default(cuid())
  question   Question @relation("QuestionTestCases", fields: [questionId], references: [id])
  questionId String
  input      String
  expected   String
  isPublic   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  question   Question @relation("QuestionAnswers", fields: [questionId], references: [id])
  questionId String
  user       User     @relation("UserAnswers", fields: [userId], references: [id])
  userId     String
  answer     String? // skip if coding question
  createdAt  DateTime @default(now())
}

model TestResponse {
  id            String       @id @default(cuid())
  test          Test         @relation("TestToTestResponse", fields: [testId], references: [id])
  testId        String
  user          User         @relation("UserToTestResponse", fields: [userId], references: [id])
  userId        String
  userAnswers   UserAnswer[] @relation("TestResponseUserAnswers")
  marksObtained Int          @default(0)
  totalMarks    Int
  submittedAt   DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserAnswer {
  id             String       @id @default(cuid())
  testResponse   TestResponse @relation("TestResponseUserAnswers", fields: [testResponseId], references: [id])
  testResponseId String
  question       Question     @relation("QuestionUserAnswers", fields: [questionId], references: [id])
  questionId     String
  answer         String?
  isCorrect      Boolean
  createdAt      DateTime     @default(now())
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum QuestionType {
  MCQ
  CODING
}

enum Gender {
  MALE
  FEMALE
}
