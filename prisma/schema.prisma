// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  role        Role
  isVerified  Boolean   @default(false)
  isAdmin     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tests       Test[]    @relation("UserTests")
  answers     Answer[]  @relation("UserAnswers")
}

model VerificationToken {
  email   String   @id
  token   String   @unique
  expires DateTime
}

model Test {
  id            String      @id @default(cuid())
  title         String
  subject       String
  instructions  String
  duration      Int // (in mins)
  totalPoints   Int
  questions     Question[]  @relation("TestQuestions")
  creator       User        @relation("UserTests", fields: [creatorId], references: [id])
  creatorId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Question {
  id          String      @id @default(cuid())
  type        QuestionType
  question    String
  options     String[]
  points      Int
  test        Test        @relation("TestQuestions", fields: [testId], references: [id])
  testId      String
  answers     Answer[]    @relation("QuestionAnswers")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Answer {
  id          String     @id @default(cuid())
  question    Question   @relation("QuestionAnswers", fields: [questionId], references: [id])
  questionId  String
  user        User       @relation("UserAnswers", fields: [userId], references: [id])
  userId      String
  answer      String
  createdAt   DateTime   @default(now())
}

enum Role {
  STUDENT
  TEACHER
}

enum QuestionType {
  MCQ
  FILL_BLANK
  ESSAY
  TRUE_FALSE
}

enum Gender {
  MALE
  FEMALE
}